#pragma checksum "C:\Users\arik\Source\Repos\InbarChanewnew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\Statistics\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b9a3860f556d890d273e272e53886ece541fdaf0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Statistics_Index), @"mvc.1.0.view", @"/Views/Statistics/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Statistics/Index.cshtml", typeof(AspNetCore.Views_Statistics_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\arik\Source\Repos\InbarChanewnew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\_ViewImports.cshtml"
using AphasiaGreetingCards;

#line default
#line hidden
#line 2 "C:\Users\arik\Source\Repos\InbarChanewnew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\_ViewImports.cshtml"
using AphasiaGreetingCards.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b9a3860f556d890d273e272e53886ece541fdaf0", @"/Views/Statistics/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6bb0b20ffb9dcda31f21808a720e7f13448f5db2", @"/Views/_ViewImports.cshtml")]
    public class Views_Statistics_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/d3.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/d3.layout.cloud.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\arik\Source\Repos\InbarChanewnew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\Statistics\Index.cshtml"
  
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(90, 257, true);
            WriteLiteral(@"<div class=""Page"">
    <div class=""display-4 text-center""> Statistics </div>
    <hr />
    <div class=""row"">
        <div id=""words""></div>
        <!--<div id=""pie"">Html.Partial(""Pie"")</div>-->
        <div id=""my_dataviz""></div>
    </div>

    ");
            EndContext();
            BeginContext(347, 34, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b9a3860f556d890d273e272e53886ece541fdaf04698", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(381, 6, true);
            WriteLiteral("\r\n    ");
            EndContext();
            BeginContext(387, 47, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b9a3860f556d890d273e272e53886ece541fdaf05879", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(434, 72, true);
            WriteLiteral("\r\n    <!--Script For Word Counting-->\r\n    <script>\r\n        var keys = ");
            EndContext();
            BeginContext(507, 42, false);
#line 19 "C:\Users\arik\Source\Repos\InbarChanewnew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\Statistics\Index.cshtml"
              Write(Html.Raw(Json.Serialize(ViewData["keys"])));

#line default
#line hidden
            EndContext();
            BeginContext(549, 22, true);
            WriteLiteral(";\r\n        var vals = ");
            EndContext();
            BeginContext(572, 42, false);
#line 20 "C:\Users\arik\Source\Repos\InbarChanewnew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\Statistics\Index.cshtml"
              Write(Html.Raw(Json.Serialize(ViewData["vals"])));

#line default
#line hidden
            EndContext();
            BeginContext(614, 2424, true);
            WriteLiteral(@";
        (function () {
            var fill = d3.scale.category20();
            var layout = d3.layout.cloud()
                .size([500, 500])
                .words(d3.zip(keys, vals).map(function (d) {
                    return { text: d[0], size: 10 + d[1] * 15 };
                }))
                .padding(5)
                .rotate(function () { return ~~(Math.random() * 2) * 90; })
                .font(""Impact"")
                .fontSize(function (d) { return d.size; })
                .on(""end"", draw);
            layout.start();
            function draw(words) {
                d3.select(""#words"").append(""svg"")
                    .attr(""width"", layout.size()[0])
                    .attr(""height"", layout.size()[1])
                    .append(""g"")
                    .attr(""transform"", ""translate("" + layout.size()[0] / 2 + "","" + layout.size()[1] / 2 + "")"")
                    .selectAll(""text"")
                    .data(words)
                    .enter().append(""text"")");
            WriteLiteral(@"
                    .style(""font-size"", function (d) { return d.size + ""px""; })
                    .style(""font-family"", ""Impact"")
                    .style(""fill"", function (d, i) { return fill(i); })
                    .attr(""text-anchor"", ""middle"")
                    .attr(""transform"", function (d) {
                        return ""translate("" + [d.x, d.y] + "")rotate("" + d.rotate + "")"";
                    })
                    .text(function (d) { return d.text; });
            }
        })();</script>
    <!--End of Script For Word Counting-->
    <script src=""https://d3js.org/d3-scale-chromatic.v1.min.js""></script>
    <script src=""https://d3js.org/d3.v5.min.js""></script>
    <script>

        // set the dimensions and margins of the graph
        var width = 500
        height = 500
        margin = 50

        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        var radius = Math.min(width, height) / 2 - margi");
            WriteLiteral(@"n

        // append the svg object to the div called 'my_dataviz'
        var svg = d3.select(""#my_dataviz"")
            .append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height)
            .append(""g"")
            .attr(""transform"", ""translate("" + width / 2 + "","" + height / 2 + "")"");

        // Create dummy data
        var names = ");
            EndContext();
            BeginContext(3039, 43, false);
#line 75 "C:\Users\arik\Source\Repos\InbarChanewnew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\Statistics\Index.cshtml"
               Write(Html.Raw(Json.Serialize(ViewData["names"])));

#line default
#line hidden
            EndContext();
            BeginContext(3082, 22, true);
            WriteLiteral(";\r\n        var quan = ");
            EndContext();
            BeginContext(3105, 42, false);
#line 76 "C:\Users\arik\Source\Repos\InbarChanewnew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\Statistics\Index.cshtml"
              Write(Html.Raw(Json.Serialize(ViewData["quan"])));

#line default
#line hidden
            EndContext();
            BeginContext(3147, 1688, true);
            WriteLiteral(@";
        var data = { ""Birthday"": quan[0], ""Bar Mitzva"": 0, ""Boy"": 30, ""Girl"": 8, ""Daily"": 12, ""Holiday"": 35, ""Love"": 24, ""Valentine"": 21, ""Wedding"": 32 }

        // set the color scale
        var color = d3.scaleOrdinal()
            .domain(data)
            .range(d3.schemeSet2);

        // Compute the position of each group on the pie:
        var pie = d3.pie()
            .value(function (d) { return d.value; })
        var data_ready = pie(d3.entries(data))
        // Now I know that group A goes from 0 degrees to x degrees and so on.

        // shape helper to build arcs:
        var arcGenerator = d3.arc()
            .innerRadius(0)
            .outerRadius(radius)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svg
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('path')
            .attr('d', arcGenerator)
            .attr('fill', functio");
            WriteLiteral(@"n (d) { return (color(d.data.key)) })
            .attr(""stroke"", ""black"")
            .style(""stroke-width"", ""3px"")
            .style(""opacity"", 0.7)

        // Now add the annotation. Use the centroid method to get the best coordinates
        svg
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('text')
            .text(function (d) { return d.data.key + ""\n"" + d.data.value})
            .attr(""transform"", function (d) { return ""translate("" + arcGenerator.centroid(d) + "")""; })
            .style(""text-anchor"", ""middle"")
            .style(""font-size"", 12)


    </script>
</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
