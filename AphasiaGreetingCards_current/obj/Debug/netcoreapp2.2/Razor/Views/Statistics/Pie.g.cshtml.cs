#pragma checksum "C:\Users\arik\Source\Repos\InbarChanew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\Statistics\Pie.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8d78c79b5a6c44b1044e65e07ccadcccfbf80d8f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Statistics_Pie), @"mvc.1.0.view", @"/Views/Statistics/Pie.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Statistics/Pie.cshtml", typeof(AspNetCore.Views_Statistics_Pie))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\arik\Source\Repos\InbarChanew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\_ViewImports.cshtml"
using AphasiaGreetingCards;

#line default
#line hidden
#line 2 "C:\Users\arik\Source\Repos\InbarChanew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\_ViewImports.cshtml"
using AphasiaGreetingCards.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8d78c79b5a6c44b1044e65e07ccadcccfbf80d8f", @"/Views/Statistics/Pie.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6bb0b20ffb9dcda31f21808a720e7f13448f5db2", @"/Views/_ViewImports.cshtml")]
    public class Views_Statistics_Pie : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(120, 782, true);
            WriteLiteral(@"
<script src=""https://d3js.org/d3.v4.js""></script>
<script src=""https://d3js.org/d3-scale-chromatic.v1.min.js""></script>
<div id=""my_dataviz""></div>
<script>

    // set the dimensions and margins of the graph
    var width = 450
    height = 450
    margin = 40

    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
    var radius = Math.min(width, height) / 2 - margin

    // append the svg object to the div called 'my_dataviz'
    var svg = d3.select(""#my_dataviz"")
        .append(""svg"")
        .attr(""width"", width)
        .attr(""height"", height)
        .append(""g"")
        .attr(""transform"", ""translate("" + width / 2 + "","" + height / 2 + "")"");

    // Create dummy data
    var names = ");
            EndContext();
            BeginContext(903, 43, false);
#line 26 "C:\Users\arik\Source\Repos\InbarChanew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\Statistics\Pie.cshtml"
           Write(Html.Raw(Json.Serialize(ViewData["names"])));

#line default
#line hidden
            EndContext();
            BeginContext(946, 18, true);
            WriteLiteral(";\r\n    var quan = ");
            EndContext();
            BeginContext(965, 42, false);
#line 27 "C:\Users\arik\Source\Repos\InbarChanew\AphasiaGreetingCards\AphasiaGreetingCards_current\Views\Statistics\Pie.cshtml"
          Write(Html.Raw(Json.Serialize(ViewData["quan"])));

#line default
#line hidden
            EndContext();
            BeginContext(1007, 1506, true);
            WriteLiteral(@";
    var data = { names[0]: quan[0], names[1]: quan[1], names[2]: quan[2], names[3]: quan[3], names[4]: quan[4] };

    // set the color scale
    var color = d3.scaleOrdinal()
        .domain(data)
        .range(d3.schemeSet2);

    // Compute the position of each group on the pie:
    var pie = d3.pie()
        .value(function (d) { return d.value; })
    var data_ready = pie(d3.entries(data))
    // Now I know that group A goes from 0 degrees to x degrees and so on.

    // shape helper to build arcs:
    var arcGenerator = d3.arc()
        .innerRadius(0)
        .outerRadius(radius)

    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
    svg
        .selectAll('mySlices')
        .data(data_ready)
        .enter()
        .append('path')
        .attr('d', arcGenerator)
        .attr('fill', function (d) { return (color(d.data.key)) })
        .attr(""stroke"", ""black"")
        .style(""stroke-width"", ""2px"")
        .sty");
            WriteLiteral(@"le(""opacity"", 0.7)

    // Now add the annotation. Use the centroid method to get the best coordinates
    svg
        .selectAll('mySlices')
        .data(data_ready)
        .enter()
        .append('text')
        .text(function (d) { return d.data.key + "" "" + d.data.value + ""%"" })
        .attr(""transform"", function (d) { return ""translate("" + arcGenerator.centroid(d) + "")""; })
        .style(""text-anchor"", ""middle"")
        .style(""font-size"", 10)


</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
