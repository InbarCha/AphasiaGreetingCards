
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="Page">
    <div class="display-4 text-center"> Statistics </div>
    <hr />
    <div class="row">
        <div id="words"></div>
        <!--<div id="pie">Html.Partial("Pie")</div>-->
        <div id="my_dataviz"></div>
    </div>

    <script src="~/js/d3.js"></script>
    <script src="~/js/d3.layout.cloud.js"></script>
    <!--Script For Word Counting-->
    <script>
        var keys = @Html.Raw(Json.Serialize(ViewData["keys"]));
        var vals = @Html.Raw(Json.Serialize(ViewData["vals"]));
        (function () {
            var fill = d3.scale.category20();
            var layout = d3.layout.cloud()
                .size([500, 500])
                .words(d3.zip(keys, vals).map(function (d) {
                    return { text: d[0], size: 10 + d[1] * 15 };
                }))
                .padding(5)
                .rotate(function () { return ~~(Math.random() * 2) * 90; })
                .font("Impact")
                .fontSize(function (d) { return d.size; })
                .on("end", draw);
            layout.start();
            function draw(words) {
                d3.select("#words").append("svg")
                    .attr("width", layout.size()[0])
                    .attr("height", layout.size()[1])
                    .append("g")
                    .attr("transform", "translate(" + layout.size()[0] / 2 + "," + layout.size()[1] / 2 + ")")
                    .selectAll("text")
                    .data(words)
                    .enter().append("text")
                    .style("font-size", function (d) { return d.size + "px"; })
                    .style("font-family", "Impact")
                    .style("fill", function (d, i) { return fill(i); })
                    .attr("text-anchor", "middle")
                    .attr("transform", function (d) {
                        return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                    })
                    .text(function (d) { return d.text; });
            }
        })();</script>
    <!--End of Script For Word Counting-->
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script>

        // set the dimensions and margins of the graph
        var width = 500
        height = 500
        margin = 50

        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        var radius = Math.min(width, height) / 2 - margin

        // append the svg object to the div called 'my_dataviz'
        var svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        // Create dummy data
        var names = @Html.Raw(Json.Serialize(ViewData["names"]));
        var quan = @Html.Raw(Json.Serialize(ViewData["quan"]));
        var data = { "Birthday": quan[0], "Bar Mitzva": 0, "Boy": 30, "Girl": 8, "Daily": 12, "Holiday": 35, "Love": 24, "Valentine": 21, "Wedding": 32 }

        // set the color scale
        var color = d3.scaleOrdinal()
            .domain(data)
            .range(d3.schemeSet2);

        // Compute the position of each group on the pie:
        var pie = d3.pie()
            .value(function (d) { return d.value; })
        var data_ready = pie(d3.entries(data))
        // Now I know that group A goes from 0 degrees to x degrees and so on.

        // shape helper to build arcs:
        var arcGenerator = d3.arc()
            .innerRadius(0)
            .outerRadius(radius)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svg
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('path')
            .attr('d', arcGenerator)
            .attr('fill', function (d) { return (color(d.data.key)) })
            .attr("stroke", "black")
            .style("stroke-width", "3px")
            .style("opacity", 0.7)

        // Now add the annotation. Use the centroid method to get the best coordinates
        svg
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('text')
            .text(function (d) { return d.data.key + "\n" + d.data.value})
            .attr("transform", function (d) { return "translate(" + arcGenerator.centroid(d) + ")"; })
            .style("text-anchor", "middle")
            .style("font-size", 12)


    </script>
</div>